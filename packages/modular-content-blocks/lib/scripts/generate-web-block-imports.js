/**
 * Unfortunately, Next.js' Rust-based compiler does not support native glob imports.
 * Therefore this build script is required to simplify the boilerplate and admin effort of creating
 * new modular content blocks.
 *
 * The Sanity application uses Vite to compile, which does have native globs, so this script
 * is only necessary for the web side of the modular blocks.
 */

const fs = require('fs');
const path = require('path');

const outerBlocksPath = path.join(__dirname, '..', '..', 'blocks', 'outer');
const innerBlocksPath = path.join(__dirname, '..', '..', 'blocks', 'inner');
const outputDirectory = path.join(__dirname, '..', 'web');
const outputPath = path.join(outputDirectory, 'blocks.ts');

/**
 * Function to recursively read directories based on a specified pattern.
 * @param {string} baseDir
 * @param {RegExp} pattern
 * @returns {*[]}
 */
function readDirs(baseDir, pattern) {
  let results = [];
  const entries = fs.readdirSync(baseDir, { withFileTypes: true });

  entries.forEach(entry => {
    const fullPath = path.join(baseDir, entry.name);
    if (entry.isDirectory()) {
      results = results.concat(readDirs(fullPath, pattern));
    } else if (entry.isFile() && entry.name.match(pattern)) {
      results.push(fullPath);
    }
  });

  return results;
}

/**
 * Generate relative import path from the output path
 * @param {string} fullPath
 * @param {string} outputPath
 * @returns {string}
 */
function getRelativeImportPath(fullPath, outputPath) {
  const relativePath = path.relative(outputPath, fullPath);
  return './' + relativePath
    .replace(/\\/g, '/')
    .replace(/\.ts$/, ''); // Normalize for Unix-like paths and remove .ts
}

/**
 * Generate import statements and export them.
 */
function generateImportsAndExports() {
  const outerFiles = readDirs(outerBlocksPath, /web\.ts$/);
  const innerFiles = readDirs(innerBlocksPath, /web\.ts$/);

  const outerImports = outerFiles.map((file, index) =>
      `import { component as outerComponent${index}, query as outerQuery${index}, config as outerConfig${index} } from '${getRelativeImportPath(file, outputDirectory)}'`).join('\n');

  const innerImports = innerFiles.map((file, index) =>
      `import { component as innerComponent${index}, query as innerQuery${index}, config as innerConfig${index} } from '${getRelativeImportPath(file, outputDirectory)}'`).join('\n');


  const exportsContent = `
export const webOuterBlocks = [${outerFiles.map((_, index) => `\n  { component: outerComponent${index}, query: outerQuery${index}, config: outerConfig${index} }\n`).join(', ')}];\n
export const webInnerBlocks = [${innerFiles.map((_, index) => `\n  { component: innerComponent${index}, query: innerQuery${index}, config: innerConfig${index} }\n`).join(', ')}];
`;

  const comment = `/**
 * This file is generated. Do not modify this file.
 * It was generated at build time of the web app, via pnpm dev or pnpm build.
 * It was generated by the file ${__filename}.
 * It was last generated at ${(new Date()).toUTCString()}.
 */`;

  // Write to a file
  fs.writeFileSync(outputPath,
    `${comment}\n\n${outerImports}\n${innerImports}\n${exportsContent}`);
}

generateImportsAndExports();
